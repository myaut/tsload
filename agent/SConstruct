import os
import sys

import shutil

from SCons.Action import CommandAction, ActionFactory
from SCons.Errors import StopError 
from SCons.Script.SConscript import SConsEnvironment

from optparse import SUPPRESS_HELP 

sys.path.append(os.path.join('tools', 'build'))

from pathutil import *
from tstest import TestSuite

# ------------------------
# ENVIRONMENT HELPERS

def AddEnableOption(option, dest, default, help):
    (enable_help, disable_help) = (SUPPRESS_HELP, 'Disable ' + help + ' (enabled by default)')         \
                                    if default                                                         \
                                    else ('Enable ' + help + ' (disabled by default)', SUPPRESS_HELP)
    
    AddOption('--enable-'+option,  dest=dest, action="store_true", default=default,
              help=enable_help)
    AddOption('--disable-'+option,  dest=dest, action="store_false", default=default, 
              help=disable_help)


SConsEnvironment.Chmod = ActionFactory(os.chmod,
        lambda dest, mode: 'Chmod("%s", 0%o)' % (dest, mode))

# ------------------------
# BUILD OPTIONS

AddOption('--mach',  dest='mach', action="store", default='',
          help='Machine architecture')

# buildid file
AddOption('--update-build',  dest='update_build', action="store_true",
          help='Update build file')

AddOption('--update-doc',  dest='update_doc', action="store_true",
          help='Update documentation')
AddOption('--doc-format',  dest='doc_format', action="store", default='html',
          metavar='FORMAT', help='Documentation format (markdown or html)')


AddEnableOption('mempool-alloc',  dest='mempool_alloc', default=False,
          help='mempool allocator [EXPERIMENTAL]')
AddEnableOption('mempool-valgrind',  dest='mempool_valgrind', default=False,
          help='adds Valgrind support to mempool allocator. If valgrind development package is not installed, this option is useless')

# Debug options
AddEnableOption('debug', dest='debug', default=True, 
                help='debug build')
AddEnableOption('trace', dest='trace', default=False, 
                help='various tracing facilities')

# Dynamic event tracing framework support
AddEnableOption('usdt', dest='usdt', default=True, 
                help='User Defined Tracing (SystemTap, DTrace)')
AddEnableOption('etw', dest='etw', default=True, 
                help='Event Tracing for Windows')

# tsloadd config options
AddOption('--tsload-log-file', dest='tsload_log_file', action='store', default='tsload.log',
          metavar='LOGFILE', help='Log file for tsload daemon (specified in tsloadd configuration)')
AddOption('--tsload-server', dest='tsload_server', action='store', default='localhost:9090',
          metavar='SERVER:PORT', help='Default server for tsload agent (specified in tsloadd configuration).')

AddOption('--with-windows-sdk', dest='with_windows_sdk', action='store', default='',
          metavar='WINSDK', help='Path to windows SDK')

# test options
AddOption('--runner-threads',  dest='runner_threads', action="store", default='1',
          metavar='COUNT', help='Number of threads in test suite runner')
AddOption('--test-dir',  dest='test_directory', action="store", default='',
          metavar='TESTDIR', help='Path to test directory')

# tsload options
AddEnableOption('fast-randgen',  dest='fast_randgen', default=False,
                help='Use faster (but less precise) method in rg_calculate_double()')

# Installation directories options are specified below

# -------------------------
# PREPARE BUILD ENVIRONMENT

env = DefaultEnvironment(ENV = {'PATH': os.environ['PATH']},
                         TARGET_ARCH = GetOption('mach'))

env['TSLOADPATH'] = Dir('#').abspath
env['TSPROJECT'] = 'tsload'
env['TSVERSION'] = '0.2'
env['TSNAME'] =  '-'.join((env['TSPROJECT'], env['TSVERSION'], sys.platform))

env['DEBUG'] = GetOption('debug')

SConscript('SConscript.env.py', 'env')

# Build options for libjson. Because libjson.h uses across all agent code,
# define these settings globally
if GetOption('debug'):
    env.Macroses('JSON_DEBUG')

env.Macroses('JSON_MEMORY_CALLBACKS', 'JSON_INT_TYPE=long long')

# --------------------------
# PLATFORM-SPECIFIC BUILD
SConscript('SConscript.plat.py', 'env')

if sys.platform == 'win32':
    env.Macroses('_WINSOCKAPI_')
    env.Macroses('_CRT_SECURE_NO_WARNINGS')

# --------------------------
# ETRACE PREPROCESSOR
env['ETRACEENABLED'] = GetOption('usdt') or GetOption('etw')
SConscript('SConscript.etrace.py', 'env')
    
# ----------------------------
# CONFIGURE

env.Append(CPPPATH = [env.BuildDir('include')])

SConscript('SConscript.conf.py', 'env')

# ------------------------
# INSTALLATION DIRECTORIES

SConscript('SConscript.install.py', 'env')

env['LOAD_LOGFILE'] = GetOption('tsload_log_file')
if not PathIsAbs(env['LOAD_LOGFILE']):
    env['LOAD_LOGFILE'] = PathJoin(env['PREFIX'], env['INSTALL_VAR'],  env['LOAD_LOGFILE'])

env['LOAD_MODPATH'] = PathJoin(env['PREFIX'], env['INSTALL_MOD_LOAD'])

# Specify RPATH to shared libraries
if env.SupportedPlatform('posix') and env['CC'] == 'gcc':
    env.Append(LINKFLAGS = ['-zorigin'])
    
    lib_rel_path = PathRelative(env['INSTALL_LIB'], env['INSTALL_BIN'])
    env.Append(RPATH = env.Literal(os.path.join('\\$$ORIGIN', lib_rel_path)))

#------------
# DOC
SConscript('SConscript.doc.py', 'env')

# -------------------------
# BUILD ITEMS   

build_items = [ # tsload-core
               ('lib', 'libjson'),
               ('lib', 'libtscommon'),
               ('lib', 'libhostinfo'),
               ('lib', 'libtsfile'),
               ('lib', 'libtsload'),               
               ('cmd', 'tshostinfo'),
               ('cmd', 'tsfutil'),               
               
               # tsload-standalone
               ('cmd', 'run-tsload'),
               
               # tsload-agents
               ('lib', 'libtsagent'),
               ('cmd', 'tsgenuuid'),               
               ('cmd', 'tsloadd'),
               ]

# ------------
# BUILD

for tgtdir, target in build_items:
    path = PathJoin(tgtdir, target)
    variant_dir = env.BuildDir(path)
    
    SConscript(PathJoin(path, 'SConscript'), 'env',
               variant_dir = variant_dir)

# Iterate over modules directories and add modules to build items
for mod_type in ('load', ):
    for mod in Dir('mod').Dir(mod_type).glob('*'):
        mod_path = str(mod)
        variant_dir = env.BuildDir(mod_path)
        
        SConscript(PathJoin(mod_path, 'SConscript'), 'env',
                   variant_dir = variant_dir)

#------------
# INSTALL various files

# ------------
# TESTS
if 'tests' in BUILD_TARGETS:
    test_f = file(PathJoin('test', 'test.list'))
    env['TEST_SUITE'] = TestSuite(test_f)
        
    SConscript(PathJoin('test', 'SConscript'), 'env',
               variant_dir = PathJoin('#build', 'test'))
    
#------------
# DOC (again)
SConscript(PathJoin('doc', 'SConscript'), 'env',
           variant_dir = PathJoin('#build', 'doc'))

#------------
# ZIP

packages = ['tsload-core', 
            'tsload-agents', 
            'tsload-standalone', 
            'tsload-doc']

# Packages dependencies

env.Depends('tsload-agents', 'tsload-core')
env.Depends('tsload-standalone', 'tsload-core')

for pkg in packages:
    aliases = env.Alias(pkg)
    alias = aliases[0]
    
    zip_name = '-'.join((pkg, env['TSVERSION']))   + '.zip'
    zip_path = PathJoin('#build', 'pkg', zip_name)
    
    zip_files = env.ZipArchive(zip_path, alias.children())
    env.Depends('zip', pkg)
    env.Alias('zip', zip_files)
