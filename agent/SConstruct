import os
import sys

import shutil

from SCons.Action import CommandAction, ActionFactory
from SCons.Errors import StopError 
from SCons.Script.SConscript import SConsEnvironment

from optparse import SUPPRESS_HELP 

sys.path.append(os.path.join('tools', 'build'))

from pathutil import *
from manager import AddBuildItem, AddModule, PrepareBuild, GetBuildTargets, BuildManagerPrint
from tstest import TestSuite

# ------------------------
# ENVIRONMENT HELPERS

def AddEnableOption(option, dest, default, help):
    (enable_help, disable_help) = (SUPPRESS_HELP, 'Disable ' + help + ' (enabled by default)')         \
                                    if default                                                         \
                                    else ('Enable ' + help + ' (disabled by default)', SUPPRESS_HELP)
    
    AddOption('--enable-'+option,  dest=dest, action="store_true", default=default,
              help=enable_help)
    AddOption('--disable-'+option,  dest=dest, action="store_false", default=default, 
              help=disable_help)


SConsEnvironment.Chmod = ActionFactory(os.chmod,
        lambda dest, mode: 'Chmod("%s", 0%o)' % (dest, mode))

# ------------------------
# BUILD OPTIONS

AddOption('--list',  dest='list', action="store_true", default=False,
          metavar='TARGETS', help='Prints list of targets which could be built')
AddOption('--mach',  dest='mach', action="store", default='',
          help='Machine architecture')

# buildid file
AddOption('--update-build',  dest='update_build', action="store_true",
          help='Update build file')

AddEnableOption('mempool-alloc',  dest='mempool_alloc', default=False,
          help='mempool allocator [EXPERIMENTAL]')
AddEnableOption('mempool-valgrind',  dest='mempool_valgrind', default=False,
          help='adds Valgrind support to mempool allocator. If valgrind development package is not installed, this option is useless')

# Debug options
AddEnableOption('debug', dest='debug', default=True, 
                help='debug build')
AddEnableOption('trace', dest='trace', default=False, 
                help='various tracing facilities')

# Dynamic event tracing framework support
AddEnableOption('usdt', dest='usdt', default=True, 
                help='User Defined Tracing (SystemTap, DTrace)')
AddEnableOption('etw', dest='etw', default=True, 
                help='Event Tracing for Windows')

# tsloadd config options
AddOption('--tsload-log-file', dest='tsload_log_file', action='store', default='tsload.log',
          metavar='LOGFILE', help='Log file for tsload daemon (specified in tsloadd configuration)')
AddOption('--tsload-server', dest='tsload_server', action='store', default='localhost:9090',
          metavar='SERVER:PORT', help='Default server for tsload agent (specified in tsloadd configuration).')

AddOption('--with-windows-sdk', dest='with_windows_sdk', action='store', default='',
          metavar='WINSDK', help='Path to windows SDK')

# test options
AddOption('--runner-threads',  dest='runner_threads', action="store", default='1',
          metavar='COUNT', help='Number of threads in test suite runner')
AddOption('--test-dir',  dest='test_directory', action="store", default='',
          metavar='TESTDIR', help='Path to test directory')

# tsload options
AddEnableOption('fast-randgen',  dest='fast_randgen', default=False,
                help='Use faster (but less precise) method in rg_calculate_double()')

# Installation directories options are specified below

# -------------------------
# PREPARE BUILD ENVIRONMENT

env = DefaultEnvironment(ENV = {'PATH': os.environ['PATH']},
                         TARGET_ARCH = GetOption('mach'))

env['TSLOADPATH'] = Dir('#').abspath
env['TSPROJECT'] = 'tsload-agent'
env['TSVERSION'] = '0.2'
env['TSNAME'] =  '-'.join((env['TSPROJECT'], env['TSVERSION'], sys.platform))

env['DEBUG'] = GetOption('debug')

SConscript('SConscript.env.py', 'env')

# Build options for libjson. Because libjson.h uses across all agent code,
# define these settings globally
if GetOption('debug'):
    env.Macroses('JSON_DEBUG')

env.Macroses('JSON_MEMORY_CALLBACKS', 'JSON_INT_TYPE=long long')

# --------------------------
# PLATFORM-SPECIFIC BUILD
SConscript('SConscript.plat.py', 'env')

if sys.platform == 'win32':
    env.Macroses('_WINSOCKAPI_')
    env.Macroses('_CRT_SECURE_NO_WARNINGS')

# --------------------------
# ETRACE PREPROCESSOR
env['ETRACEENABLED'] = False
SConscript('SConscript.etrace.py', 'env')
    
# ----------------------------
# CONFIGURE

env.Append(CPPPATH = [env.BuildDir('include')])

SConscript('SConscript.conf.py', 'env')

#------------
# DOC
SConscript('SConscript.doc.py', 'env')

# ------------------------
# INSTALLATION DIRECTORIES

SConscript('SConscript.install.py', 'env')

env['LOAD_LOGFILE'] = GetOption('tsload_log_file')
if not PathIsAbs(env['LOAD_LOGFILE']):
    env['LOAD_LOGFILE'] = PathJoin(env['PREFIX'], env['INSTALL_VAR'],  env['LOAD_LOGFILE'])

env['LOAD_MODPATH'] = PathJoin(env['PREFIX'], env['INSTALL_MOD_LOAD'])

# Specify RPATH to shared libraries
if env.SupportedPlatform('posix') and env['CC'] == 'gcc':
    env.Append(LINKFLAGS = ['-zorigin'])
    env.Append(RPATH = env.Literal(os.path.join('\\$$ORIGIN', os.pardir, 'lib')))

# -------------------------
# BUILD ITEMS AND DEPENDENCIES  

AddBuildItem('core', 'lib',
             targets=['lib/libjson',
                      'lib/libhostinfo',
                      'lib/libtscommon'])
AddBuildItem('core', 'agent',
             targets = ['lib/libtsagent'],
             deps = ['core-lib'])


AddBuildItem('swat', 'tool',
             targets = ['cmd/swat-import'],
             deps = ['core-lib'],
             default = False)
AddBuildItem('hostinfo', 'tool',
             targets = ['cmd/tshostinfo'],
             deps = ['core-lib'])

AddBuildItem('tsfile', 'lib',
             targets = ['lib/libtsfile'],
             deps = ['core-lib'])
AddBuildItem('tsfile', 'util',
             targets = ['cmd/tsfutil'],
             deps = ['core-lib', 
                     'tsfile-lib'])

AddBuildItem('load', 'lib',
             targets = ['lib/libtsload'],
             deps = ['core-lib'])          
AddBuildItem('load', 'agent',
             targets = ['cmd/tsloadd'],
             deps = ['core-agent',
                     'load-lib'])
AddBuildItem('load', 'tool',
             targets = ['cmd/run-tsload'],
             deps = ['load-lib', 
                     'tsfile-lib'])
AddBuildItem('load', 'modules',
             deps = ['core-lib'])

AddBuildItem('jsonts', 'bench',
             targets = ['tools/json-ts/bench'],
             deps = ['load-lib'],
             default = False)

AddBuildItem('genuuid', 'tool',
             targets = ['cmd/tsgenuuid'],
             deps = ['load-agent'])


# Iterate over modules directories and add modules to build items
for mod_type in ('load', ):
    for mod in Dir('mod').Dir(mod_type).glob('*'):
        AddModule(mod_type, mod)

# ------------
# LIST
if GetOption('list'):
    # Print information about build items in Makefile-like notation
    BuildManagerPrint()
    Exit(0)

# ------------
# BUILD
PrepareBuild([value
              for key, value 
              in ARGLIST
              if key == 'build'])

for target in GetBuildTargets():
    variant_dir = env.BuildDir(target)
    
    SConscript(PathJoin(target, 'SConscript'), 'env',
               variant_dir = variant_dir)

#------------
# INSTALL various files

# ------------
# TESTS
if 'tests' in BUILD_TARGETS:
    test_f = file(PathJoin('test', 'test.list'))
    env['TEST_SUITE'] = TestSuite(test_f)
        
    SConscript(PathJoin('test', 'SConscript'), 'env',
               variant_dir = PathJoin('#build', 'test'))

#------------
# ZIP
if 'zip' in BUILD_TARGETS:
    zip = env.Zip(env['ZIPFILE'], env['PREFIX'])
    env.Alias('zip', env['ZIPFILE'])
