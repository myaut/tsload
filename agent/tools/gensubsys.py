import os
import sys

import getopt

sys.path.append(os.path.join(os.path.dirname(__file__), 'build'))
from subsys import SubsystemList

HEADER = '''
/* This file is automatically generated
 * DO NOT EDIT IT, edit SConscript UseSubsystems directive instead */ 

#include <tsload/defs.h>
#include <tsload/init.h>

#include <stdlib.h>
'''
DECL_SUBSYSTEM = '''
LIBEXPORT int %(name)s_init(void);
LIBEXPORT void %(name)s_fini(void);
static struct subsystem subsys_%(name)s =
    SUBSYSTEM("%(alias)s", %(name)s_init, %(name)s_fini);
'''
SSLIST_HDR = '''
static struct subsystem* subsystems[] = {
'''
REF_SUBSYSTEM = '''     & subsys_%(name)s, '''
SSLIST_TAIL = '''
    NULL
};
'''
FUNC_INIT = '''
int %(function_name)s(void) {
    atexit(ts_finish);
    return ts_init(subsystems, %(count)s);
}
'''

usage = ''' Generates subsystem initializer source. 

Usage:
    gensubsys.py -c /path/to/subsystems.list -f function_init ss1 [ss2 [...]]
'''

opts, ss_list = getopt.getopt(sys.argv[1:], 'c:f:')

opts = dict(opts)
try:
    ss_list_path = opts['-c']
    function_name = opts['-f']
except KeyError as ke:
    print >> sys.stderr, 'Missing %s option' % str(ke)
    print >> sys.stderr, usage
    sys.exit(1)

ss_list = SubsystemList(ss_list)
ss_list.read(ss_list_path)
ss_list.build()

print HEADER

for ss in ss_list:
    print DECL_SUBSYSTEM % {'name': ss.name, 'alias': ss.alias}

print SSLIST_HDR

ss_count = 0
for ss in ss_list:
    print REF_SUBSYSTEM % {'name': ss.name}
    ss_count += 1

print SSLIST_TAIL
print FUNC_INIT % {'function_name': function_name, 
                   'count': ss_count}

