from pathutil import *
from tstest import TestSuite
try:
    from collections import OrderedDict
except ImportError:
    from ordereddict import OrderedDict

import sys
import os

from ConfigParser import ConfigParser

Import('env')

is_system = env['TEST_MODE_INT']

if is_system:
    gen_target = 'systests'
    target = 'systests.html'
else:
    gen_target = 'tests'
    target = 'tests.log'

suite_path = env['TEST_SUITE']
suite = TestSuite(file(suite_path.abspath, 'r'))

test_instances = []

class ConfigPathError(Exception):
    pass

def create_path_section(cfg, aliases, paths, name):
    obj_sect = cfg.add_section(name)
    for obj in aliases:
        if obj in paths:
            obj_path = str(paths[obj][0])
            cfg.set(name, obj, obj_path)
        else:
            raise ConfigPathError("Alias '%s' doesn't exist" % obj)

def walk_uses(uses):
    # Parse use with args (chown, rename)
    for use in uses:
        use_arg_list = use.split()        
        use_filename = use_arg_list.pop(0)        
        use_filename = use_filename.replace('/', os.sep)
        
        is_builddir = use_filename.startswith('$BUILDDIR' + os.sep)
        if is_builddir:
            _, use_filename = use_filename.split(os.sep, 1)
        
        yield use_arg_list, use_filename, is_builddir

def create_use_section(cfg, uses, groups, name, builddir):
    use_sect = cfg.add_section(name)
    for use_arg_list, use_filename, is_builddir in walk_uses(uses):
              
        use_args = {}
        
        use_name = 'use_' + use_filename.replace('/', '_').replace('.', '_')
        
        for use_arg in use_arg_list:
            arg_name, value = use_arg.split(':')
            if arg_name == 'rename':
                value = value.replace('/', os.sep)
            use_args[arg_name] = value
                
        if is_builddir:
            use_path = PathJoin(builddir, use_filename)
        else:
            for group in groups:            
                use_path = PathJoin('test', group, use_filename)
                if PathExists(use_path):
                    break                            
            else:
                raise ConfigPathError("File or directory '%s' doesn't exist" % use_filename)
        
        cfg.set(name, use_name, use_path)
                
        # Create a section that contains use-args
        if use_args:
            args_sect = cfg.add_section(use_name)
            
            for arg_name, value in use_args.items():
                cfg.set(use_name, arg_name, value)

def gen_src_files(test, env):
    srcfiles = []
    
    for fname in test.files:
        fpath = PathJoin(test.group, fname)
        
        if fname in test.groupfiles:            
            cname = test.name + '_' + fname
            cpath = PathJoin(test.group, cname)
            
            env.Command(cpath, fpath, 
                        Copy("$TARGET", "$SOURCE"))
            srcfiles.append(cpath)
        else:
            srcfiles.append(fpath)
    
    return srcfiles

def CreateConfig(target, source, env):
    global is_integrational
    
    test = env['TEST']
    
    cfg_file = file(str(target[0]), 'w')
    cfg = ConfigParser(dict_type = OrderedDict)
    
    cfg.add_section('test')
    cfg.set('test', 'name', test.name)
    cfg.set('test', 'group', test.group)
    cfg.set('test', 'maxtime', test.maxtime)
    cfg.set('test', 'expect', test.expect[0])
    cfg.set('test', 'expect_arg', test.expect[1])
    
    # Resolve libraries and modules to real path of files    
    create_path_section(cfg, test.libs, env['TESTLIBS'], 'libs')
    create_path_section(cfg, test.mods, env['TESTMODS'], 'mods')    
        
    create_use_section(cfg, test.uses, test.groups, 'uses',
                       env.BuildDir(''))
    
    bin_sect = cfg.add_section('bins')        
    if is_system:        
        cfg.set('test', 'args', test.args)    
    cfg.set('bins', 'test', source[0])
    
    print >> cfg_file, "# This file is automatically generated"
    print >> cfg_file, "# Edit test/tests.list to alter it contents"
    print >> cfg_file, ""
    
    cfg.write(cfg_file)

env.Append(ENV = {'TSTEST_RUNNER_THREADS': 
                  GetOption('runner_threads')})
env.Append(ENV = {'TSTEST_TEST_DIRECTORY': 
                  GetOption('test_directory')})

if env.SupportedPlatform('win'):
    env.Append(ENV = {'TMPDIR': os.getenv('TMPDIR'),
                      'TEMP': os.getenv('TEMP'),
                      'TMP': os.getenv('TMP'),
                      'TSTEST_REDIRECTED_STDOUT': '1'})

common_objs = env.Object(Glob('common/*.c'))

for test in suite:
    if not test.enabled:
        continue
    
    if not env.SupportedPlatform(test.plat):
        continue
    
    # XXX: cloning entire environment for each test?
    tst = env.Clone()      
    
    for lib in test.libs:
        # Hack for chisquare test && windows
        if lib=='m' and not tst.SupportedPlatform('posix'):
            continue
        
        tst.AddDependency('lib', lib)
    
    tst['TEST'] = test
    tst['CPPPATH'] += ['test']
    
    if tst.SupportedPlatform('win'):
        tst['LIBS'] += ['DbgHelp']
        
    if tst['CC'] == 'gcc':
        tst.Append(CCFLAGS = ['-g'] )
    elif tst['CC'] == 'cl':
        tst.Append(CCFLAGS = ['/Od']) 
    
    if not is_system:
        if test.bin is not None:
            raise StopError('Unit tests could not have destination binaries')
        
        srcdirs = [Glob(PathJoin(test.group, dir, '*.c')) 
                   for dir in test.dirs]
        srcfiles = gen_src_files(test, tst)
        
        test_target = PathJoin(test.group, 'tst_' + test.name)
        
        for plat, extlib in test.extlibs:
            if tst.SupportedPlatform(plat):
                tst.Append(LIBS = [extlib])        
        
        ssobjs = []
        if test.subsystems:
            tst.UseSubsystems(*test.subsystems)
            ssobjs = [tst.SubsysBuilder([test.name + '_init.c'], [])]
        
        bin = tst.Program(test_target, srcdirs + srcfiles + common_objs + ssobjs)
        cfg = tst.Command(str(bin[0]) + '.cfg', bin, CreateConfig)
    else:
        if test.bin is None:
            raise StopError('System test')
        
        bin = env['TESTBINS'][test.bin]      
        cfg = tst.Command(test.group + '_' + test.name + '.cfg', bin, CreateConfig)        
    
    for use_arg_list, use_filename, is_builddir in walk_uses(test.uses):
        if is_builddir:
            tst.Depends(cfg, env.BuildDir(use_filename))
    
    tst.Depends(cfg, suite_path)
    test_instances.append(cfg)

if is_system:
    env.Append(ENV = {'TSTEST_USE_HTML': '1'})

tests = env.Command(target, test_instances, 
            '%s tools/test/run-suite.py $SOURCES > $TARGET' % sys.executable)
env.AlwaysBuild(tests)
env.Alias(gen_target, target)

if is_system:
    env.Depends(tests, 'bootstrap.min.css')
