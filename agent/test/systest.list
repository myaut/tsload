# System tests list
# 
# Syntax is similiar to test/test.list
# It has, however, another set of supported parameters:
# 		dir, file 			not supported
# 		bin=tsexperiment	destination binary to test
#		mod=mod_name		required module name
#		"args=a1 -a a2"		arguments

#====================================================
# TSExperiment system tests
#====================================================

# Expected values for return values of tsexperiment:
#  Basic command errors:
#	 CMD_OK		    		0
#	 CMD_MISSING_CMD    	1
#	 CMD_UNKNOWN_CMD    	2
#	 CMD_INVALID_OPT  		3
#	 CMD_INVALID_ARG  		4
#	 CMD_MISSING_ARG  		5
# Experiment well-known errors:
#	 CMD_NOT_EXISTS			11
#	 CMD_NO_PERMS			12
#	 CMD_ALREADY_EXISTS		13
#	 CMD_IS_ROOT			14
# All other errors:
#	 CMD_GENERIC_ERROR		30


^tsexperiment lib=libtscommon	lib=libtsjson 	lib=libtsobj		\
			  lib=libtsload		lib=libhostinfo	 	lib=libtsfile	\
			  bin=tsexperiment

# ---------------------------
# WLTYPES
 
^wltypes				extends=tsexperiment mod=busy_wait	

# normal tests
wltypes/all				args=wl
wltypes/all_json		"args=wl -j"
wltypes/spec			"args=wl busy_wait"
wltypes/spec_2			"args=wl busy_wait http" mod=http enabled=False

# wltype with experiment arg = CMD_INVALID_OPT
wltypes/exp_arg			"args=-e experiment wl" use=experiment expect=return:3

# invalid name of wltype = CMD_INVALID_ARG
wltypes/spec_inval		"args=wl non_existent"	expect=return:11
wltypes/spec_inval_2	"args=wl busy_wait non_existent" expect=return:11

# ---------------------------
# LIST

^list				extends=tsexperiment use=experiment "args=-e experiment list"
# all tests must succeed
list/ok_list			
list/stale_id		"use=stale.id 							\
		rename:experiment/experiment.id"
list/runid_no_perms										\
	"use=experiment/experiment-1/experiment.json 		\
		chmod:0000 										\
		rename:experiment/experiment-1/experiment.json"
list/noent												\
	"use=experiment/experiment-1/experiment.json 		\
		remove:True										\
		rename:experiment/experiment-1/experiment.json"

# ---------------------------
# SHOW

^show_eflag				extends=tsexperiment use=experiment 

show_eflag/dir 			"args=-e experiment show"
show_eflag/dir_ps		"args=-e experiment/ show"
show_eflag/cfg_path		"args=-e experiment/experiment.json show"

^show					extends=tsexperiment use=experiment "args=-e experiment show"

show/ok_root		
show/ok_root_json			"args=-j"
show/ok_root_list			"args=-l"

show/noent	 			expect=return:11 	\
	"use=experiment/experiment.json 		\
		remove:True							\
		rename:experiment/experiment.json" 
show/no_perms		 	expect=return:12 	\
	"use=experiment/experiment.json 		\
		chmod:0000 							\
		rename:experiment/experiment.json" 

show/no_workloads	 	expect=return:30	\
	"use=no-workloads.json 					\
		rename:experiment/experiment.json"
show/empty_workloads						\
	"use=empty-workloads.json 				\
		 rename:experiment/experiment.json"

show/no_threadpools  	expect=return:30	\
	"use=no-threadpools.json 				\
		 rename:experiment/experiment.json"
show/empty_wls_tps							\
	"use=empty-wls-tps.json 				\
		 rename:experiment/experiment.json"		

show/wl_no_tp			expect=return:30	\
	"use=wl-no-tp.json 						\
		 rename:experiment/experiment.json"
show/wl_inval_tp		expect=return:30	\
	"use=wl-inval-tp.json					\
		 rename:experiment/experiment.json"

show/runid			"args=1"
show/runid_neg		"args=-- -2"	expect=return:4
show/runid_not_int	"args=test"		expect=return:4
show/runid_inval	"args=10" 		expect=return:11

show/runid_noent	"args=1"		expect=return:11		\
	"use=experiment/experiment-1/experiment.json 			\
			remove:True										\
			rename:experiment/experiment-1/experiment.json"			
show/runid_no_perms	"args=1"		expect=return:12		\
	"use=experiment/experiment-1/experiment.json 			\
			chmod:0000 										\
			rename:experiment/experiment-1/experiment.json"

# ---------------------------
# REPORT

^report		extends=tsexperiment use=experiment  mod=busy_wait	\
			"args=-e experiment report"

report/ok				"args=1"

report/wl_ok			"args=1 test1"
report/wl_ok_2			"args=1 test1 test2"		
report/wl_invalid		"args=1 invalid_wl"			expect=return:4
report/wl_invalid_2		"args=1 invalid_wl test2"	expect=return:4

report/tsf_noent	"args=1" 						\
	expect=return:11								\
	"use=experiment/experiment-1/test1.tsf		 	\
			remove:True								\			
			rename:experiment/experiment-1/test1.tsf"		
report/tsf_no_perms	"args=1"						\
	expect=return:12								\
	"use=experiment/experiment-1/test1.tsf		 	\
			chmod:0000 								\			
			rename:experiment/experiment-1/test1.tsf"
report/broken_tsf_1	"args=1"						\
	expect=return:30								\
	"use=broken1.tsf							 	\			
			rename:experiment/experiment-1/test1.tsf"			
report/broken_tsf_2	"args=1" 						\
	expect=return:30								\
	"use=broken2.tsf							 	\			
			rename:experiment/experiment-1/test1.tsf"
			
			
# ---------------------------
# EXPORT
# Since is shares some code with report, 
# check only export-specific use-cases

^export		extends=tsexperiment use=experiment  mod=busy_wait	\
			"args=-e experiment export"

export/ok				"args=1"
export/wl_ok			"args=1 test1"
export/wl_ok_2			"args=1 test1 test2"		
export/wl_invalid		"args=1 invalid_wl"			expect=return:4
export/wl_invalid_2		"args=1 invalid_wl test2"	expect=return:4

export/backend_csv			"args=-F csv 1 "
export/backend_json			"args=-F json 1"
export/backend_jsonraw		"args=-F jsonraw 1"
export/backend_bad			"args=-F bad 1"			expect=return:4
											
export/csv_valsep		"args=-F csv -o valsep=\; 1"
export/csv_valsep_inval "args=-F csv -o 'valsep= II ' 1" 						\
						expect=return:4
export/csv_opt_2		"args=-F csv -o noheader,valsep=\| 1"
export/csv_header		"args=-F csv -o header=rq_flags 1"
export/csv_header_2		"args=-F csv -o header=rq_flags:hex 1"

# These tests should expect CMD_INVALID_ARG, but header is lazily 
# parsed, so TSFile will treat this as get() error, not `set()` error
export/csv_hdr_inval_field		"args=-F csv -o header=rq_no_such_field 1"		\
						expect=return:30
export/csv_hdr_inval_subopt		"args=-F csv -o header=rq_flags:inval_subopt 1" \
						expect=return:30

export/dest				"args=-F csv -d export 1" use=export
export/dest_noent		"args=-F csv -d export 1"								\
						expect=return:11
export/dest_no_perms	"args=-F csv -d export 1" "use=export chmod:0000"		\
						expect=return:12

export/schema_noent	"args=1"						\
	expect=return:11								\
	"use=experiment/experiment-1/test1-schema.json 	\
			remove:True								\
			rename:experiment/experiment-1/test1-schema.json"
export/schema_no_perms		"args=1"				\
	expect=return:12								\
	"use=experiment/experiment-1/test1-schema.json 	\
			chmod:0000 								\
			rename:experiment/experiment-1/test1-schema.json"
export/broken_schema	"args=1"					\
	expect=return:30								\
	"use=broken-schema.json						 	\
			rename:experiment/experiment-1/test1-schema.json"
# ---------------------------
# RUN
# This is also reduces workload start delay to 0.2 s since
# correctness of measurements is not interesting here
^run		extends=tsexperiment use=experiment  mod=busy_wait	\
		"args=-Xtse_run_wl_start_delay=200000000 -e experiment run" maxtime=5
		
run/ok			
run/batch				"args=1"
run/reproduce			"args=1"
run/reproduce_set		"args=-s threadpools:test_tp:quantum=200000000 1"
run/reproduce_set_inval	"args=-s threadpools:1:quantum=200000000 1"				\
						expect=return:4
run/trace				"args=-T 1"
run/trace_set			"args=-T -s threadpools:test_tp:quantum=200000000 1"		\
						expect=return:3
run/reproduce_inval		"args=10"		expect=return:11

run/empty_workloads							\
	"use=empty-workloads.json 				\
		 rename:experiment/experiment.json"
run/empty_wls_tps							\
	"use=empty-wls-tps.json 				\
		 rename:experiment/experiment.json"		

run/noent	 			expect=return:11 	\
	"use=experiment/experiment.json 		\
		remove:True							\
		rename:experiment/experiment.json" 
run/no_perms		 	expect=return:12 	\
	"use=experiment/experiment.json 		\
		chmod:0000 							\
		rename:experiment/experiment.json"

run/stale_id		"use=stale.id 			\
		rename:experiment/experiment.id"
run/invalid_id		"use=invalid.id 		\
		rename:experiment/experiment.id"		
run/steps_file_chars	expect=return:30	\
	"use=invalid-chars.tss 					\
		rename:experiment/test2.tss"
run/steps_file_negative	expect=return:30	\
	"use=negative-count.tss 				\
		rename:experiment/test2.tss"

run/reproduce_noent	"args=1"								\
	expect=return:11										\
	"use=experiment/experiment-1/experiment.json 			\
			remove:True										\
			rename:experiment/experiment-1/experiment.json"			
run/reproduce_no_perms	"args=1"							\
	expect=return:12										\
	"use=experiment/experiment-1/experiment.json 			\
			chmod:0000 										\
			rename:experiment/experiment-1/experiment.json"															

run/trace_schema_noent	"args=-T 1"					\
	expect=return:11								\
	"use=experiment/experiment-1/test1-schema.json 	\
			remove:True								\
			rename:experiment/experiment-1/test1-schema.json"
run/trace_schema_no_perms		"args=-T 1"			\
	expect=return:12								\
	"use=experiment/experiment-1/test1-schema.json 	\
			chmod:0000 								\
			rename:experiment/experiment-1/test1-schema.json"
run/trace_broken_schema	"args=-T 1"					\
	expect=return:30								\
	"use=broken-schema.json						 	\			
			rename:experiment/experiment-1/test1-schema.json"		

run/trace_tsf_noent	"args=-T 1" 					\
	expect=return:11								\
	"use=experiment/experiment-1/test1.tsf		 	\
			remove:True								\			
			rename:experiment/experiment-1/test1.tsf"		
run/trace_tsf_no_perms	"args=-T 1"					\
	expect=return:12								\
	"use=experiment/experiment-1/test1.tsf		 	\
			chmod:0000 								\			
			rename:experiment/experiment-1/test1.tsf"
run/trace_broken_tsf_1	"args=-T 1"					\
	expect=return:30								\
	"use=broken1.tsf							 	\			
			rename:experiment/experiment-1/test1.tsf"			
run/trace_broken_tsf_2	"args=-T 1" 				\
	expect=return:30								\
	"use=broken2.tsf							 	\			
			rename:experiment/experiment-1/test1.tsf"

#====================================================
# TSHostInfo system tests
#====================================================

^tshostinfo   lib=libtscommon		lib=libtsjson 	lib=libtsobj	\
			  lib=libhostinfo	 	bin=tshostinfo
tshostinfo/host 	"args=-x host"
tshostinfo/sched 	"args=-x sched"
tshostinfo/cpu 		"args=-x cpu"
tshostinfo/disk 	"args=-x disk"
tshostinfo/net 		"args=-x net"
tshostinfo/vm 		"args=-x vm"

#====================================================
# TSFileUtil system tests
#====================================================
^tsfutil   lib=libtscommon		lib=libtsjson 	lib=libtsobj	\
		   lib=libtsfile		bin=tsfutil

tsfutil/create				use=schema.json									\
							"args=-s schema.json create test.tsf"   
tsfutil/create2				"use=invalid-schema.json rename:schema.json"	\
							"args=-s schema.json create test.tsf"						
tsfutil/create_broken		"use=broken-schema.json rename:schema.json"		\
							"args=-s schema.json create test.tsf"			\
								expect=return:1

tsfutil/count				use=schema.json	use=tsfile.tsf					\
							"args=-s schema.json count tsfile.tsf" 
						
tsfutil/get					use=schema.json	use=tsfile.tsf					\
							"args=-s schema.json get tsfile.tsf"   
tsfutil/get2				"use=invalid-schema.json rename:schema.json"	\
							use=tsfile.tsf									\
							"args=-s schema.json get tsfile.tsf"						

tsfutil/get_broken_schema	"use=broken-schema.json rename:schema.json"		\
							"args=-s schema.json get tsfile.tsf"			\
								expect=return:1
tsfutil/get_broken_tsf_1	use=schema.json	use=broken1.tsf					\
							"args=-s schema.json get broken1.tsf"			\
								expect=return:1
tsfutil/get_broken_tsf_2	use=schema.json	use=broken2.tsf					\
							"args=-s schema.json get broken2.tsf"			\
								expect=return:1

tsfutil/get_schema_noent	use=tsfile.tsf									\
							"args=-s schema.json get tsfile.tsf"   			\
								expect=return:1   
tsfutil/get_schema_noperms	"use=schema.json chmod:0000 rename:schema.json"	\
							use=tsfile.tsf									\
							"args=-s schema.json get tsfile.tsf"   			\
								expect=return:1   
tsfutil/get_tsf_noent		use=schema.json									\
							"args=-s schema.json get tsfile.tsf"   			\
								expect=return:1   
tsfutil/get_tsf_noperms		use=schema.json									\
							"use=tsfile.tsf chmod:0000 rename:tsfile.tsf"	\
							"args=-s schema.json get tsfile.tsf"   			\
								expect=return:1

^tsfget		extends=tsfutil	"args=-s schema.json" 	use=schema.json			\
			use=tsfile.tsf

tsfget/neg_range		"args=-F csv get -g -1:10 tsfile.tsf"   		\
							expect=return:1
tsfget/reverse_range	"args=-F csv get -g 20:10 tsfile.tsf"
tsfget/inval_range		"args=-F csv get -g 101:110 tsfile.tsf"   		\
							expect=return:1
tsfget/inval_range_2	"args=-F csv get -g 30:50 tsfile.tsf"   		\
							expect=return:1
tsfget/until_last		"args=-F csv get -g 10:$ tsfile.tsf"

tsfget/json				"args=-F json get -g 5:10 tsfile.tsf"
tsfget/json_raw			"args=-F jsonraw get -g 5:10 tsfile.tsf"
tsfget/csv				"args=-F csv get -g 5:10 tsfile.tsf"	
tsfget/csv_header		"args=-F csv get -g 5:10 -o header=rq_user,rq_thread,num_cycles tsfile.tsf"
tsfget/csv_header_u		"args=-F csv get -g 5:10 -o header=rq_user,rq_thread,num_cycles:unsigned tsfile.tsf"
tsfget/csv_header_h		"args=-F csv get -g 5:10 -o header=rq_flags:hex tsfile.tsf"
tsfget/csv_no_header	"args=-F csv get -g 5:10 -o noheader tsfile.tsf"
tsfget/csv_valsep		"args=-F csv get -g 5:10 -o valsep=! tsfile.tsf"							

tsfget/out_no_perms		"use=data1.json chmod:0000 rename:data1.json"		\
						"args=-F json get -g 5:10 tsfile.tsf data1.json"	\
							expect=return:1

^tsfadd		extends=tsfutil	"args=-s schema.json" 	use=schema.json			\
			use=tsfile.tsf

tsfadd/json					use=data1.json									\
							"args=-F json add tsfile.tsf data1.json"	
tsfadd/csv					use=data1.csv									\
							"args=-F csv add tsfile.tsf data1.csv"
tsfadd/csv_header_h			use=header-hex.csv								\
							"args=-F csv add tsfile.tsf header-hex.csv"
tsfadd/csv_noheader			use=noheader.csv								\
							"args=-F csv add tsfile.tsf noheader.csv"		\
								expect=return:1
tsfadd/csv_incomplete		use=incomplete.csv								\
							"args=-F csv add tsfile.tsf incomplete.csv"

#====================================================
# TSGenModSrc system tests
#====================================================
^tsgenmodsrc_nodev   lib=libtscommon	lib=libtsjson 	bin=tsgenmodsrc			\
			   		 use=share

tsgenmodsrc_nodev/header	use=mod-normal "args=hdr mod-normal/modinfo.json"	\
							expect=return:1

^tsgenmodsrc		lib=libtscommon		lib=libtsjson 		bin=tsgenmodsrc		\
			   		use=share	use=include										\		   		
			   		"use=$BUILDDIR/make.bldenv.json								\
			   				rename:share/devel/make.bldenv.json"				\
			   		"use=$BUILDDIR/scons.bldenv.json							\ 
			   				rename:share/devel/scons.bldenv.json"				\
			   		"use=$BUILDDIR/cmd/tsgenmodsrc/modsrc						\ 
			   				rename:share/devel/modsrc"							

tsgenmodsrc/header				use=mod-normal "args=hdr mod-normal/modinfo.json"
tsgenmodsrc/source				use=mod-normal "args=src mod-normal/modinfo.json"
tsgenmodsrc/makefile			use=mod-normal "args=makefile -b make mod-normal/modinfo.json"
tsgenmodsrc/scons_ext			use=mod-normal "args=makefile -t ext mod-normal/modinfo.json"
tsgenmodsrc/scons_int			use=mod-normal "args=makefile -t int mod-normal/modinfo.json"

tsgenmodsrc/gen_makefile		use=mod-normal "args=gen -b make mod-normal/modinfo.json"
tsgenmodsrc/gen_scons_ext		use=mod-normal "args=gen -t ext mod-normal/modinfo.json"
tsgenmodsrc/gen_scons_int		use=mod-normal "args=gen -t int mod-normal/modinfo.json"

^tsgms_modinfo					extends=tsgenmodsrc "args=gen modx/modinfo.json"

tsgms_modinfo/gen_not_empty_dir		"use=mod-not-empty-dir rename:modx"			\
										expect=return:1
tsgms_modinfo/gen_no_dir_ent			expect=return:1
tsgms_modinfo/gen_no_dir_perms		"use=mod-normal chmod:0000 rename:modx"		\ 
										expect=return:1
tsgms_modinfo/gen_no_modinfo_ent	"use=mod-noent rename:modx"					\
										expect=return:1
tsgms_modinfo/gen_no_modinfo_perms	"use=mod-normal rename:modx"				\
									"use=mod-normal/modinfo.json chmod:0000		\ 
											rename:modx/modinfo.json"			\
										expect=return:1


tsgms_modinfo/gen_hasdata 			"use=mod-hasdata rename:modx"
tsgms_modinfo/gen_hasstep 			"use=mod-hasstep rename:modx"

tsgms_modinfo/gen_noname 			"use=mod-noname rename:modx"			expect=return:1

tsgms_modinfo/gen_no_wltclass 		"use=mod-no-wltclass rename:modx"		expect=return:1
tsgms_modinfo/gen_inval_wltclass 	"use=mod-inval-wltclass rename:modx"	expect=return:1

tsgms_modinfo/gen_no_params 		"use=mod-no-params rename:modx"			expect=return:1
tsgms_modinfo/gen_empty_params 		"use=mod-empty-params rename:modx"
tsgms_modinfo/gen_inval_defval_type "use=mod-inval-defval-type rename:modx" expect=return:1
tsgms_modinfo/gen_inval_minmax_type "use=mod-inval-minmax-type rename:modx"	expect=return:1
tsgms_modinfo/gen_no_max 			"use=mod-no-max rename:modx"			expect=return:1

tsgms_modinfo/gen_vars 				"use=mod-vars rename:modx"
tsgms_modinfo/gen_inval_vars 		"use=mod-inval-vars rename:modx"		expect=return:1