#define LOG_SOURCE "@MODNAME@"
#include <tsload/log.h>

#include <tsload/defs.h>

#include <tsload/mempool.h>
#include <tsload/modapi.h>
#include <tsload/autostring.h>

#include <tsload/load/workload.h>
#include <tsload/load/wltype.h>

#include <@HEADER_FILENAME@>

#include <stdlib.h>

DECLARE_MODAPI_VERSION(MOD_API_VERSION);
DECLARE_MOD_NAME("@MODNAME@");
DECLARE_MOD_TYPE(MOD_TSLOAD);

@foreach WLT_LIST
@WL_PARAMS_STRSET@
@endfor

@foreach WLT_LIST
MODEXPORT wlp_descr_t @WL_PARAMS_VARNAME@[] = {
@WL_PARAMS_ARRAY@
	{ WLP_NULL }
};
@endfor

@define WL_GET_PARAMS
@ifdef WL_PARAM_FIELDS
struct @WL_PARAM_STRUCT@* @WL_PARAM_VARNAME@ =
		(struct @WL_PARAM_STRUCT@*) wl->wl_params;
@endif
@enddef

@define WL_GET_DATA
@ifdef WL_DATA_STRUCT
struct @WL_DATA_STRUCT@* @WL_DATA_VARNAME@ =
		(struct @WL_DATA_STRUCT@*) wl->wl_private;
@endif
@enddef 

@define RQ_GET_PARAMS
@ifdef RQ_PARAM_FIELDS
struct @RQ_PARAM_STRUCT@* @RQ_PARAM_VARNAME@ =
		(struct @RQ_PARAM_STRUCT@*) rq->rq_params;
@endif
@enddef

module_t* self = NULL;

@foreach WLT_LIST
MODEXPORT int @FUNC_CONFIG@(workload_t* wl) {
	@WL_GET_PARAMS@
@ifdef WL_DATA_STRUCT
	struct @WL_DATA_STRUCT@* @WL_DATA_VARNAME@ = NULL;
	
	@WL_DATA_VARNAME@ = (struct @WL_DATA_STRUCT@*) mp_malloc(sizeof(struct @WL_DATA_STRUCT@));
	
	if(@WL_DATA_VARNAME@ == NULL) {
		wl_notify(wl, WLS_CFG_FAIL, 0, "Cannot allocate data structure");
		return -1;
	}
	
	wl->wl_private = @WL_DATA_VARNAME@;
@endif

	/* TODO: Insert workload configuration code here */

	return 0;
}

MODEXPORT int @FUNC_UNCONFIG@(workload_t* wl) {
	@WL_GET_PARAMS@
	@WL_GET_DATA@

	/* TODO: Insert workload cleanup code here */

@ifdef WL_DATA_STRUCT
	mp_free(@WL_DATA_VARNAME@);
@endif

	return 0;
}

MODEXPORT int @FUNC_RUN_REQUEST@(request_t* rq) {
	workload_t* wl = rq->rq_workload;
 	@WL_GET_PARAMS@
	@WL_GET_DATA@
	@RQ_GET_PARAMS@
	
	/* TODO: Implement request function */

	return 0;
}

@ifdef FUNC_STEP
MODEXPORT int @FUNC_STEP@(workload_step_t* wls) {
	workload_t* wl = wls->wls_workload;
	@WL_GET_PARAMS@
	@WL_GET_DATA@

	/* TODO: Implement step function */
	
	return 0;
}
@endif

wl_type_t @WLT_VARNAME@ = {
	/* wlt_name */			AAS_CONST_STR("@WLT_NAME@"),
	/* wlt_class */			@WLT_CLASS@,
	
	/* wlt_description */
	"",
	
	/* wlt_params */		@WL_PARAMS_VARNAME@,
						
@ifdef WL_PARAM_FIELDS
	/* wlt_params_size*/	sizeof(struct @WL_PARAM_STRUCT@),
@else
	/* wlt_params_size*/	0,
@endif
@ifdef RQ_PARAM_FIELDS
	/* wlt_rqparams_size*/	sizeof(struct @RQ_PARAM_STRUCT@),
@else
	/* wlt_rqparams_size*/	0,
@endif

	/* wlt_wl_config */		@FUNC_CONFIG@,
	/* wlt_wl_unconfig */	@FUNC_UNCONFIG@,
@ifdef FUNC_STEP
	/* wlt_wl_step */		@FUNC_STEP@,
@else
	/* wlt_wl_step */		NULL,
@endif
	/* wlt_run_request */	@FUNC_RUN_REQUEST@
};
@endfor

MODEXPORT int mod_config(module_t* mod) {
	self = mod;

@foreach WLT_LIST
	wl_type_register(mod, &@WLT_VARNAME@);
@endfor
	
	return MOD_OK;
}

MODEXPORT int mod_unconfig(module_t* mod) {
@foreach WLT_LIST
	wl_type_unregister(mod, &@WLT_VARNAME@);
@endfor
	
	return MOD_OK;
}