tgtroot = 'tsload-core'
target = 'libhostinfo'

Import('env')

lib = env.Clone()

lib.PreparePlatform('include/hostinfo')

if lib.SupportedPlatform('solaris'):
    lib.Append(LIBS = ['diskmgt', 'lgrp', 'nvpair', 'kstat', 'dladm'])

if lib.SupportedPlatform('win'):
    lib.Append(LIBS = ['setupapi', 'user32', 'advapi32', 'wbemuuid', 'comsuppw', 
                       'iphlpapi', 'Ws2_32', 'mpr'])

lib.UseSubsystems('mempool', 'tsobj')

extra_sources = []
if lib.SupportedPlatform('win'):
    extra_sources = ['plat/win/wmi.cpp']

vlib = lib.Clone()
objects = vlib.CompileSharedLibrary(extra_sources)
library = vlib.LinkSharedLibrary(target, objects, versioned=True)
vlib.InstallTarget(tgtroot, lib['INSTALL_LIB'], library)

if lib.SupportedPlatform('linux') and GetOption('lvm2'):
	SConscript('lvm2/SConscript', 'lib')
if lib.SupportedPlatform('posix') and GetOption('zfs'):
	SConscript('zfs/SConscript', 'lib')
if lib.SupportedPlatform('solaris') and GetOption('svm'):
    SConscript('svm/SConscript', 'lib')


lib.Append(TSDOC_SPACE='hostinfo')
tsdoc = [lib.DocBuilder(['#include/hostinfo/hiobject.h', 'hiobject.c']),
         lib.DocBuilder(['include/hitrace.h', 'hitrace.c']),
         
         lib.DocBuilder(['#include/hostinfo/uname.h', Glob("plat/*/uname.c")]),
         lib.DocBuilder(['#include/hostinfo/cpuinfo.h', 'cpuinfo.c', Glob("plat/*/cpuinfo.c")]),
         lib.DocBuilder(['#include/hostinfo/pageinfo.h', Glob("plat/*/pageinfo.c")]),
         lib.DocBuilder(['#include/hostinfo/diskinfo.h', 'diskinfo.c', Glob("plat/*/diskinfo.c"),
                         'lvm2/lvm2.c', 'zfs/zfs.c', 'svm/svm.c']),
         lib.DocBuilder(['#include/hostinfo/fsinfo.h', 'fsinfo.c', Glob("plat/*/fsinfo.c")]),
         lib.DocBuilder(['#include/hostinfo/netinfo.h', 'netinfo.c', Glob("plat/*/netinfo.c"),
                         'net-wmi/net-wmi.c']),
         
         lib.DocBuilder(['plat/linux/sysfs.h', 'plat/linux/sysfs.c']),
         lib.DocBuilder(['plat/solaris/minipicl.h', 'plat/solaris/minipicl.c']),
         lib.DocBuilder(['plat/win/wmi.h', 'plat/win/wmi.cpp']),
         ]
env.Append(TSDOC = tsdoc)
