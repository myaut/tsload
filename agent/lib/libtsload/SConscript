import os

PathJoin = os.path.join

tgtroot = 'tsload-core'
target = 'libtsload'

Import('env')

lib = env.Clone()

if lib.SupportedPlatform('win'):
    lib.Append(LIBS = ['advapi32']) 

if GetOption('fast_randgen'):
    lib.Macroses('TSLOAD_RANDGEN_FAST')

lib.AddDeps(('lib', 'libtscommon'),
            ('lib', 'libtsjson'), 
            ('lib', 'libtsobj'),
            ('lib', 'libhostinfo'))

lib.PreparePlatform('include/tsload/load')
objects = lib.CompileSharedLibrary(Glob("rqsched/*.c") + Glob("randgen/*.c") + \
                                   Glob("tpdisp/*.c"))

etrace_files, man_files = env.PreprocessETrace(['workload.c'] + objects, 
                                                target + lib['SHLIBSUFFIX'])

library = lib.LinkSharedLibrary(target, objects + etrace_files)

lib.Append(TSDOC_SPACE='tsload')
tsdoc = [lib.DocBuilder(['#include/tsload/load/randgen.h', 'randgen.c', Glob('randgen/*.c')]),
        
        lib.DocBuilder(['#include/tsload/load/threadpool.h', 'threadpool.c', 'worker.c']),
        lib.DocBuilder(['#include/tsload/load/tpdisp.h', 'tpdisp.c', Glob('tpdisp/*.c')]),
        
        lib.DocBuilder(['#include/tsload/load/workload.h', 'workload.c']),
        lib.DocBuilder(['#include/tsload/load/wltype.h', 'wltype.c']),
        lib.DocBuilder(['#include/tsload/load/wlparam.h', 'wlparam.c', 'wlpgen.c']),
        lib.DocBuilder(['#include/tsload/load/rqsched.h', 'rqsched.c', Glob('rqsched/*.c')]),
        
        lib.DocBuilder(['#include/tsload.h', 'tsload.c']),
        ]
        
env.Append(TSDOC = tsdoc)

lib.InstallTarget(tgtroot, lib['INSTALL_LIB'], library)
lib.InstallTarget(tgtroot, lib['INSTALL_SHARE'], man_files)