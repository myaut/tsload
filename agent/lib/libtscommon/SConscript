from pathutil import *

tgtroot = 'tsload-core'
target = 'libtscommon'

Import('env')

lib = env.Clone()

lib.Macroses('LIBHOSTINFO')

# dl for modules
# pthread for thread-handling
if lib.SupportedPlatform('posix'):
    lib.Append(LIBS = ['dl', 'pthread'])

# We need librt for ns-precision time source
if lib.SupportedPlatform('linux') or lib.SupportedPlatform('solaris'):
    lib.Append(LIBS = ['rt'])

# Add winsock2 library
if lib.SupportedPlatform('win'):
    lib.Append(LIBS = ['Ws2_32'])

# Sockets and name services requires libraries
if lib.SupportedPlatform('solaris'):
    lib.Append(LIBS = ['socket', 'nsl'])

# Process PLATAPIs
lib.PreparePlatform('include/tsload')

objects = lib.CompileSharedLibrary()
library = lib.LinkSharedLibrary(target, objects)

lib.InstallTarget(tgtroot, lib['INSTALL_LIB'], library)

lib.Append(TSDOC_SPACE='tscommon')
tsdoc = [lib.DocBuilder(['#include/tsload/hashmap.h', 'hashmap.c']),
         lib.DocBuilder(['#include/tsload/syncqueue.h', 'syncqueue.c']),
         lib.DocBuilder(['#include/tsload/list.h']),         
         
         lib.DocBuilder(['#include/tsload/pathutil.h', 'pathutil.c']),
         lib.DocBuilder(['#include/tsload/dirent.h']),
         lib.DocBuilder(['#include/tsload/readlink.h']),
         lib.DocBuilder(['#include/tsload/filemmap.h']),
         
         lib.DocBuilder(['#include/tsload/threads.h', 'threads.c', 'tutil.c']),
         lib.DocBuilder(['#include/tsload/cpumask.h']),
         lib.DocBuilder(['#include/tsload/schedutil.h']),
         lib.DocBuilder(['#include/tsload/atomic.h']),
         
         lib.DocBuilder(['#include/tsload/time.h', 'time.c']),
         lib.DocBuilder(['#include/tsload/mempool.h', 'mempool.c', 'mempool_libc.c']),
         
         lib.DocBuilder(['#include/tsload/autostring.h', 'autostring.c']),
         
         lib.DocBuilder(['#include/tsload/ilog2.h']),
         lib.DocBuilder(['#include/tsload/getopt.h']),
         
         lib.DocBuilder(['#include/tsload/log.h', 'log.c']),
         lib.DocBuilder(['#include/tsload/netsock.h']),
         lib.DocBuilder(['#include/tsload/modules.h', '#include/tsload/modapi.h']),
         lib.DocBuilder(['#include/tsload/etrace.h']),
         
         lib.DocBuilder(['#include/tsload/init.h', 'init.c']),
        ]

env.Append(TSDOC = tsdoc)

Export('env')