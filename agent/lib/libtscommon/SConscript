from pathutil import *

target = 'libtscommon'

Import('env')

lib = env.Clone()

# dl for modules
# pthread for thread-handling
if lib.SupportedPlatform('posix'):
    lib.Append(LIBS = ['dl', 'pthread'])

# We need librt for ns-precision time source
if lib.SupportedPlatform('linux'):
    lib.Append(LIBS = ['rt'])

# Add winsock2 library
if lib.SupportedPlatform('win'):
    lib.Append(LIBS = ['Ws2_32'])

# Sockets and name services requires libraries
if lib.SupportedPlatform('solaris'):
    lib.Append(LIBS = ['socket', 'nsl'])

# Process PLATAPIs
lib.PreparePlatform()

lib.AddDeps(('lib', 'libjson'))

objects = lib.CompileSharedLibrary()
library = lib.LinkSharedLibrary(target, objects)

lib.InstallTarget(lib['INSTALL_LIB'], library)

tsdoc = [lib.DocBuilder(['include/hashmap.h', 'src/hashmap.c']),
         lib.DocBuilder(['include/syncqueue.h', 'src/syncqueue.c']),
         lib.DocBuilder(['include/list.h']),
         
         lib.DocBuilder(['include/pathutil.h', 'src/pathutil.c']),
         lib.DocBuilder(['include/tsdirent.h']),
         lib.DocBuilder(['include/readlink.h']),
         
         lib.DocBuilder(['include/threads.h', 'src/threads.c', 'src/tutil.c']),
         lib.DocBuilder(['include/cpumask.h']),
         lib.DocBuilder(['include/schedutil.h']),
         
         lib.DocBuilder(['include/tstime.h', 'src/tstime.c']),
         lib.DocBuilder(['include/mempool.h', 'src/mempool.c', 'src/mempool_libc.c']),
         
         lib.DocBuilder(['include/atomic.h']),
         lib.DocBuilder(['include/ilog2.h']),
         
         lib.DocBuilder(['include/log.h', 'src/log.c']),
         lib.DocBuilder(['include/getopt.h']),
         lib.DocBuilder(['include/filemmap.h']),
         lib.DocBuilder(['include/netsock.h']),
         lib.DocBuilder(['include/modules.h', 'include/modapi.h']),
         
         lib.DocBuilder(['include/tsinit.h', 'src/tsinit.c']),
        ]
lib.InstallTarget(PathJoin(lib['INSTALL_SHARE'], 'doc', 'tscommon'), tsdoc)
lib.Alias('doc', tsdoc)